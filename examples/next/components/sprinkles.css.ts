import { defineProperties, createSprinkles } from '@vanilla-extract/sprinkles';
import { vars } from './vars.css';

export const mediaQueries = {
  minSm: 'screen and (min-width: 768px)',
  minMd: 'screen and (min-width: 1024px)',
  minLg: 'screen and (min-width: 1280px)',
  minXl: 'screen and (min-width: 1440px)',
};

const responsiveProperties = defineProperties({
  conditions: {
    xs: {},
    sm: { '@media': mediaQueries.minSm },
    md: { '@media': mediaQueries.minMd },
    lg: { '@media': mediaQueries.minLg },
    xl: { '@media': mediaQueries.minXl },
  },
  defaultCondition: 'xs',
  responsiveArray: ['xs', 'sm', 'md', 'lg', 'xl'],
  properties: {
    display: [
      'none',
      'flex',
      'block',
      'inline-block',
      'inline-flex',
      'grid',
      'inline-grid',
    ],
    textAlign: ['left', 'center', 'right'],
    overflow: ['hidden', 'visible', 'auto'],
    flexDirection: ['row', 'column', 'row-reverse', 'column-reverse'],
    flex: [1, '1 1 0px', 'initial'],
    flexWrap: ['wrap', 'nowrap'],
    alignItems: ['stretch', 'flex-start', 'center', 'flex-end'],
    justifyContent: [
      'stretch',
      'flex-start',
      'center',
      'flex-end',
      'space-between',
    ],
    order: [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
    gridGap: vars.space,
    gridColumnGap: vars.space,
    gridRowGap: vars.space,
    gap: vars.space,
    columnGap: vars.space,
    rowGap: vars.space,
    paddingTop: vars.space,
    paddingBottom: vars.space,
    paddingLeft: vars.space,
    paddingRight: vars.space,
    marginTop: vars.space,
    marginBottom: vars.space,
    marginLeft: { ...vars.sizes, auto: 'auto' },
    marginRight: { ...vars.sizes, auto: 'auto' },
    top: { ...vars.sizes, auto: 'auto' },
    right: { ...vars.sizes, auto: 'auto' },
    bottom: { ...vars.sizes, auto: 'auto' },
    left: { ...vars.sizes, auto: 'auto' },
    border: vars.borders,
    borderTop: vars.borders,
    borderRight: vars.borders,
    borderBottom: vars.borders,
    borderLeft: vars.borders,
    borderWidth: vars.borders,
    borderTopWidth: vars.borders,
    borderRightWidth: vars.borders,
    borderBottomWidth: vars.borders,
    borderLeftWidth: vars.borders,
    borderTopStyle: ['solid'],
    borderRightStyle: ['solid'],
    borderBottomStyle: ['solid'],
    borderLeftStyle: ['solid'],
    borderRadius: vars.radii,
    fontFamily: vars.fontFamily,
    fontSize: vars.fontSize,
    fontWeight: vars.fontWeights,
    lineHeight: vars.lineHeight,
    letterSpacing: vars.letterSpacing,
    whiteSpace: ['unset', 'nowrap', 'normal'],
    boxShadow: vars.shadows,
    textShadow: vars.shadows,
    textTransform: ['uppercase', 'capitalize'],
    textOverflow: ['ellipsis'],
    zIndex: vars.zIndices,
    width: { ...vars.sizes, auto: 'auto' },
    minWidth: vars.sizes,
    maxWidth: { ...vars.sizes, none: 'none' },
    height: { ...vars.sizes, auto: 'auto' },
    minHeight: vars.sizes,
    maxHeight: { ...vars.sizes, none: 'none' },
    flexBasis: vars.sizes,
    position: ['static', 'absolute', 'fixed', 'relative', 'sticky'],
    transform: {
      center: 'translate(-50%, -50%)',
      centerX: 'translateX(-50%)',
      centerY: 'translateY(-50%)',
      left: 'translate(-100%)',
      none: 'none',
    },
    userSelect: ['none'],
  },
  shorthands: {
    mt: ['marginTop'],
    mr: ['marginRight'],
    mb: ['marginBottom'],
    ml: ['marginLeft'],
    mx: ['marginLeft', 'marginRight'],
    my: ['marginTop', 'marginBottom'],
    m: ['marginTop', 'marginBottom', 'marginLeft', 'marginRight'],
    margin: ['marginTop', 'marginBottom', 'marginLeft', 'marginRight'],
    marginX: ['marginLeft', 'marginRight'],
    marginY: ['marginTop', 'marginBottom'],
    pt: ['paddingTop'],
    pr: ['paddingRight'],
    pb: ['paddingBottom'],
    pl: ['paddingLeft'],
    px: ['paddingLeft', 'paddingRight'],
    py: ['paddingTop', 'paddingBottom'],
    p: ['paddingTop', 'paddingBottom', 'paddingLeft', 'paddingRight'],
    padding: ['paddingTop', 'paddingBottom', 'paddingLeft', 'paddingRight'],
    paddingX: ['paddingLeft', 'paddingRight'],
    paddingY: ['paddingTop', 'paddingBottom'],
  },
});

const colorModeProperties = defineProperties({
  conditions: {
    lightMode: {},
    darkMode: { '@media': '(prefers-color-scheme: dark)' },
  },
  defaultCondition: 'lightMode',
  properties: {
    color: vars.color,
    background: vars.color,
  },
});

export const sprinkles = createSprinkles(
  responsiveProperties,
  colorModeProperties,
);
